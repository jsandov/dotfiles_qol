#!/bin/bash

# =============================================================================
# Zsh Configuration Installation Module
# =============================================================================
# Zinit, Powerlevel10k, plugins, and complete zsh configuration
# =============================================================================

# Install and configure Zinit plugin manager
install_zinit() {
    log_info "Installing Zinit plugin manager..."
    
    local zinit_dir="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
    
    if [[ -d "$zinit_dir" ]]; then
        log_info "Zinit already installed"
        return 0
    fi
    
    # Create directory and clone Zinit
    mkdir -p "$(dirname "$zinit_dir")"
    git clone https://github.com/zdharma-continuum/zinit.git "$zinit_dir"
    
    if [[ -d "$zinit_dir" ]]; then
        log_success "Zinit installed successfully"
    else
        log_error "Zinit installation failed"
        return 1
    fi
}

# Install Powerlevel10k theme
install_powerlevel10k() {
    log_info "Powerlevel10k will be installed via Zinit in the zsh configuration"
    
    # Check if p10k config exists, if not create a basic one
    if [[ ! -f ~/.p10k.zsh ]]; then
        log_info "Creating basic Powerlevel10k configuration..."
        cat > ~/.p10k.zsh << 'EOF'
# Generated by Powerlevel10k configuration wizard.
# This is a basic configuration. Run 'p10k configure' to customize.

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Basic Powerlevel10k configuration
typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
  os_icon                 # os identifier
  dir                     # current directory
  vcs                     # git status
  prompt_char             # prompt symbol
)

typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
  status                  # exit code of the last command
  command_execution_time  # duration of the last command
  background_jobs         # presence of background jobs
  direnv                  # direnv status (https://direnv.net/)
  asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)
  virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)
  pyenv                   # python environment (https://github.com/pyenv/pyenv)
  goenv                   # go environment (https://github.com/syndbg/goenv)
  kubecontext             # current kubernetes context (https://kubernetes.io/)
  aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)
  gcloud                  # google cloud cli account and project (https://cloud.google.com/)
  google_app_cred         # google application credentials (https://cloud.google.com/docs/authentication/production)
  context                 # user@hostname
  nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)
  ranger                  # ranger shell (https://github.com/ranger/ranger)
  nnn                     # nnn shell (https://github.com/jarun/nnn)
  vim_shell               # vim shell indicator (:sh)
  midnight_commander      # midnight commander shell (https://midnight-commander.org/)
  nix_shell               # nix shell (https://nixos.org/guides/nix-pills/)
  todo                    # todo items (https://github.com/todotxt/todo.txt-cli)
  timewarrior             # timewarrior tracking status (https://timewarrior.net/)
  taskwarrior             # taskwarrior task count (https://taskwarrior.org/)
  time                    # current time
  newline                 # \n
)

# Basic styling
typeset -g POWERLEVEL9K_MODE='nerdfont-complete'
typeset -g POWERLEVEL9K_ICON_PADDING=moderate
typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=''
typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_PREFIX=''
typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX='%242F❯%f '
typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_SUFFIX=''
typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_SUFFIX=''
typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_SUFFIX=''

# Directory
typeset -g POWERLEVEL9K_DIR_FOREGROUND=31
typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_beginning
typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1

# VCS (Git)
typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=76
typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=178
typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=39

# Prompt character
typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=76
typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=196

# Status
typeset -g POWERLEVEL9K_STATUS_EXTENDED_STATES=true
typeset -g POWERLEVEL9K_STATUS_OK=false
typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=196

# Command execution time
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=101
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=3

# Background jobs
typeset -g POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=37

# Context
typeset -g POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND=180
typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=

# Time
typeset -g POWERLEVEL9K_TIME_FOREGROUND=66
typeset -g POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}'

# Transient prompt
typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=always
typeset -g POWERLEVEL9K_INSTANT_PROMPT=verbose

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
EOF
        log_info "Basic Powerlevel10k configuration created. Run 'p10k configure' to customize."
    fi
}

# Create the main zsh configuration
create_zsh_config() {
    log_info "Creating Zsh configuration..."
    
    # Move existing .zshrc to backup if it exists and isn't our version
    if [[ -f ~/.zshrc ]] && ! grep -q "Advanced Zsh Configuration" ~/.zshrc; then
        local backup_file="$HOME/.zshrc.backup.$(date +%Y%m%d_%H%M%S)"
        mv ~/.zshrc "$backup_file"
        log_info "Backed up existing .zshrc to $backup_file"
    fi
    
    # Copy our comprehensive zsh configuration
    cp "$SCRIPT_DIR/.zshrc" ~/.zshrc
    
    log_success "Zsh configuration installed at ~/.zshrc"
}

# Set up zsh as default shell
setup_zsh_shell() {
    log_info "Setting up Zsh as default shell..."
    
    # Check current shell
    if [[ "$SHELL" == */zsh ]]; then
        log_info "Zsh is already the default shell"
        return 0
    fi
    
    # Get the path to zsh
    local zsh_path
    if command -v zsh >/dev/null 2>&1; then
        zsh_path=$(which zsh)
    else
        log_error "Zsh not found"
        return 1
    fi
    
    # Add zsh to /etc/shells if not already there
    if ! grep -Fxq "$zsh_path" /etc/shells; then
        log_info "Adding $zsh_path to /etc/shells (requires sudo)"
        echo "$zsh_path" | sudo tee -a /etc/shells
    fi
    
    # Change default shell
    log_info "Changing default shell to Zsh (requires password)"
    chsh -s "$zsh_path"
    
    log_success "Default shell changed to Zsh"
    log_info "Please restart your terminal or run 'exec zsh' to start using the new configuration"
}

# Create necessary directories
create_directories() {
    log_info "Creating necessary directories..."
    
    # XDG directories
    mkdir -p "${XDG_CONFIG_HOME:-$HOME/.config}"
    mkdir -p "${XDG_DATA_HOME:-$HOME/.local/share}"
    mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}"
    
    # Zsh specific directories
    mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/zinit/completions"
    mkdir -p ~/.vim/undodir
    
    # Touch local config file
    touch ~/.zshrc.local
    
    log_success "Directories created successfully"
}

# Install Oh My Zsh completions (optional alternative)
install_ohmyzsh_completions() {
    log_info "Oh My Zsh completions will be loaded via Zinit in the configuration"
    log_info "This provides completions for: git, docker, kubectl, ansible, aws, and more"
}

# Main function
main() {
    create_directories
    install_zinit
    install_powerlevel10k
    create_zsh_config
    install_ohmyzsh_completions
    setup_zsh_shell
    
    log_success "Zsh configuration setup completed!"
    log_info "Next steps:"
    echo "  1. Restart your terminal: exec zsh"
    echo "  2. Configure prompt: p10k configure"
    echo "  3. Test new tools: ls, cat README.md, fzf-edit"
}

# Run if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main
fi